import { type NextRequest, NextResponse } from "next/server"
import { verifyToken } from "@/lib/auth-utils"
import { getDatabase } from "@/lib/mongodb"
import { ObjectId } from "mongodb"
import type { Font } from "@/lib/models/User"
import { notifyNewFont } from "@/lib/discord"

export async function POST(request: NextRequest) {
  try {
    const token = request.cookies.get("auth-token")?.value

    if (!token) {
      return NextResponse.json({ error: "Authentication required" }, { status: 401 })
    }

    const decoded = verifyToken(token)
    if (!decoded) {
      return NextResponse.json({ error: "Invalid token" }, { status: 401 })
    }

    const db = await getDatabase()
    const user = await db.collection("users").findOne({ _id: new ObjectId(decoded.userId) })

    if (!user || user.role !== "seller") {
      return NextResponse.json({ error: "Seller access required" }, { status: 403 })
    }

    const { fontData, fontFiles, previewImages } = await request.json()

    // Map the received data to the format expected by the database schema
    const processedFontFiles = fontFiles.map(
      (file: { format: string; dataUrl: string; size: number }) => ({
        format: file.format,
        fileUrl: file.dataUrl, // Store the entire Data URL
        fileSize: file.size,
      }),
    )

    const processedPreviewImages = previewImages.map((image: { dataUrl: string }) => image.dataUrl)

    const font: Font = {
      name: fontData.name,
      description: fontData.description,
      category: fontData.category,
      tags: fontData.tags,
      sellerId: new ObjectId(decoded.userId),
      sellerName: user.displayName,
      price: fontData.isFree ? 0 : Number.parseFloat(fontData.price),
      originalPrice: fontData.originalPrice ? Number.parseFloat(fontData.originalPrice) : undefined,
      isFree: fontData.isFree,
      fontFiles: processedFontFiles,
      previewImages: processedPreviewImages,
      supportedLanguages: fontData.supportedLanguages,
      downloads: 0,
      rating: 0,
      reviews: [],
      license: {
        type: fontData.isFree ? "personal" : "commercial",
        terms: fontData.isFree ? "Free for personal use only" : "Standard commercial license included",
        autoGenerated: true,
      },
      status: "pending",
      featured: false,
      sponsored: false,
      createdAt: new Date(),
      updatedAt: new Date(),
    }

    const result = await db.collection("fonts").insertOne(font)

    try {
      await notifyNewFont(font, user)
    } catch (discordError) {
      console.error("Failed to send Discord notification:", discordError)
      // Don't fail the upload if Discord notification fails
    }

    return NextResponse.json({
      message: "Font uploaded successfully",
      fontId: result.insertedId,
    })
  } catch (error) {
    console.error("Font upload error:", error)
    // Handle potential JSON body size errors, which are more likely with Data URLs
    if (error instanceof SyntaxError) {
      return NextResponse.json({ error: "Request body is too large or malformed." }, { status: 413 })
    }
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

// Increase the default body size limit for this specific route
export const config = {
  api: {
    bodyParser: {
      sizeLimit: '10mb', // Set a higher limit, e.g., 10MB
    },
  },
}
