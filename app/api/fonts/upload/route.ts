import { type NextRequest, NextResponse } from "next/server"
import { verifyToken } from "@/lib/auth"
import { getDatabase } from "@/lib/mongodb"
import { ObjectId } from "mongodb"
import type { Font } from "@/lib/models/User"
import { notifyNewFont } from "@/lib/discord"

export async function POST(request: NextRequest) {
  try {
    const token = request.cookies.get("auth-token")?.value

    if (!token) {
      return NextResponse.json({ error: "Authentication required" }, { status: 401 })
    }

    const decoded = verifyToken(token)
    if (!decoded) {
      return NextResponse.json({ error: "Invalid token" }, { status: 401 })
    }

    const db = await getDatabase()
    const user = await db.collection("users").findOne({ _id: new ObjectId(decoded.userId) })

    if (!user || user.role !== "seller") {
      return NextResponse.json({ error: "Seller access required" }, { status: 403 })
    }

    const formData = await request.formData()
    const fontDataString = formData.get("fontData") as string
    const fontData = JSON.parse(fontDataString)

    // In a real implementation, you would:
    // 1. Upload files to cloud storage (AWS S3, Cloudinary, etc.)
    // 2. Process and validate font files
    // 3. Generate thumbnails and previews
    // 4. Scan for malware

    // For now, we'll simulate file processing
    const fontFiles = []
    const previewImages = []

    // Process font files
    let fileIndex = 0
    while (formData.get(`fontFile_${fileIndex}`)) {
      const file = formData.get(`fontFile_${fileIndex}`) as File
      fontFiles.push({
        format: file.name.split(".").pop()?.toLowerCase() as "otf" | "ttf" | "woff" | "woff2",
        fileUrl: `/uploads/fonts/${Date.now()}_${file.name}`,
        fileSize: file.size,
      })
      fileIndex++
    }

    // Process preview images
    let imageIndex = 0
    while (formData.get(`previewImage_${imageIndex}`)) {
      const file = formData.get(`previewImage_${imageIndex}`) as File
      previewImages.push(`/uploads/previews/${Date.now()}_${file.name}`)
      imageIndex++
    }

    const font: Font = {
      name: fontData.name,
      description: fontData.description,
      category: fontData.category,
      tags: fontData.tags,
      sellerId: new ObjectId(decoded.userId),
      sellerName: user.displayName,
      price: fontData.isFree ? 0 : Number.parseFloat(fontData.price),
      originalPrice: fontData.originalPrice ? Number.parseFloat(fontData.originalPrice) : undefined,
      isFree: fontData.isFree,
      fontFiles,
      previewImages,
      supportedLanguages: fontData.supportedLanguages,
      downloads: 0,
      rating: 0,
      reviews: [],
      license: {
        type: fontData.isFree ? "personal" : "commercial",
        terms: fontData.isFree ? "Free for personal use only" : "Standard commercial license included",
        autoGenerated: true,
      },
      status: "pending",
      featured: false,
      sponsored: false,
      createdAt: new Date(),
      updatedAt: new Date(),
    }

    const result = await db.collection("fonts").insertOne(font)

    try {
      await notifyNewFont(font, user)
    } catch (discordError) {
      console.error("Failed to send Discord notification:", discordError)
      // Don't fail the upload if Discord notification fails
    }

    return NextResponse.json({
      message: "Font uploaded successfully",
      fontId: result.insertedId,
    })
  } catch (error) {
    console.error("Font upload error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}
